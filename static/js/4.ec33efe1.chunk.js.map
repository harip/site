{"version":3,"sources":["context/BlogContext.js","common/components/editor/TextEditor.js","blog/useBlogStyles.js","blog/BlogPost.js","blog/skeletons/SkeletonBlogPost.js","blog/BlogPosts.js","blog/Blog.js"],"names":["initialState","posts","error","retry","save","addNewBlog","saveComment","BlogContext","React","createContext","BlogProvider","children","userContextValue","useContext","UserContext","useState","blogs","setBlogs","fetchBlogData","a","axiosConfig","get","response","data","useEffect","id","blogData","put","token","currentPostIndex","findIndex","f","_id","splice","console","comment","newItem","title","subTitle","content","unshift","patch","Provider","value","style_formats","selector","styles","TextEditor","props","post","postContent","setPostContent","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","editor","newContent","blogStyles","makeStyles","theme","card","marginRight","marginBottom","marginTop","root","margin","display","justifyContent","alignContent","flexWrap","listStyle","padding","spacing","fabAddBlog","position","marginLeft","zIndex","contactHeader","fontSize","borderBottom","background","cardActions","borderTop","crudButtons","wrapper","commentBox","width","BlogPost","blogContext","editClicked","setEditClicked","postComment","setPostComment","postCommentLoading","setPostCommentLoading","classes","item","formik","useFormik","initialValues","onSubmit","values","log","titleCrudButtonMarkup","isLoggedIn","ButtonGroup","type","color","aria-label","className","IconButton","onClick","postSave","postData","postSaveComment","text","handleCommentChange","e","target","Fragment","handleSubmit","Card","CardHeader","TextField","autoFocus","label","name","fullWidth","onChange","handleChange","action","CardContent","CardActions","multiline","rowsMax","SpinnerButton","buttonProps","Typography","variant","dangerouslySetInnerHTML","__html","timeStamp","useStyles","postBody","postTitle","fontFamily","fontWeight","textAlign","sadIcon","button","SkeletonBlogPost","responseData","retryBlog","retryElement","Button","endIcon","Skeleton","Grid","container","direction","justify","alignItems","map","xs","sm","BlogPosts","useBlogStyles","document","Fab","Blog"],"mappings":"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","file":"static/js/4.ec33efe1.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react'; \r\nimport axiosConfig from '../apis/axiosConfig';\r\nimport UserContext from './UserContext';\r\n\r\nconst initialState = {\r\n  // Default empty function\r\n  posts: null,\r\n  error: false, \r\n  retry: ()=>{},\r\n  save: ()=>{},\r\n  addNewBlog: ()=>{},\r\n  saveComment: ()=>{} \r\n};\r\n\r\nconst BlogContext = React.createContext(initialState);\r\n\r\nexport const BlogProvider = ({children}) => {\r\n  const userContextValue = useContext(UserContext);\r\n  const [blogs, setBlogs] = useState(null);\r\n\r\n  useEffect(() => { \r\n    fetchBlogData(); \r\n  }, [])\r\n\r\n  async function fetchBlogData() { \r\n    let posts = null;\r\n    let error = false; \r\n    try {\r\n      let response = await axiosConfig.get('/post'); \r\n      posts=response.data; \r\n    } catch(err) {\r\n      error = true;\r\n    } \r\n\r\n    setBlogs({\r\n      posts,\r\n      error\r\n    });\r\n  }  \r\n\r\n  const save = async (id,blogData) => { \r\n    if (id){\r\n      blogData[\"_id\"] = id;\r\n    } \r\n\r\n    try {\r\n      await axiosConfig.put('/post',{\r\n        ...blogData,\r\n        token: userContextValue.token\r\n      });\r\n      \r\n      // Reset state\r\n      let { posts } = { ...blogs };  \r\n      let currentPostIndex = posts.findIndex(f=>f._id === `${id}`);\r\n      if (currentPostIndex>=0) {   \r\n        // Set content and titles\r\n        posts.splice(currentPostIndex,1,blogData);\r\n        setBlogs({\r\n          posts,\r\n          error: false\r\n        });\r\n      } \r\n\r\n      // Reset value \r\n      return true;\r\n    } catch (err) {\r\n      // Don't do anything\r\n      console.error(err);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const addNewBlog = async (id,comment) => { \r\n    try {\r\n      // Create a empty item\r\n      const newItem = {  \r\n        title:'',\r\n        subTitle: '',\r\n        content: 'Enter text' \r\n      }; \r\n      let { posts } = { ...blogs };   \r\n      posts.unshift(newItem);\r\n      setBlogs({\r\n        posts,\r\n        error: false\r\n      });\r\n      return true;\r\n    } catch (err) {\r\n      // Don't do anything\r\n      console.error(err);\r\n      return false;\r\n    } \r\n  }\r\n\r\n  const saveComment = async (id,comment) => {\r\n    try {\r\n      const response = await axiosConfig.patch('/post',  comment );\r\n      return true;\r\n    } catch (err) {\r\n      // Don't do anything\r\n      console.error(err);\r\n      return false;\r\n    } \r\n  }\r\n\r\n  const retryFetchBlog = () =>  fetchBlogData(); \r\n\r\n  return (\r\n    <BlogContext.Provider value={{\r\n      ...blogs,\r\n      retry: retryFetchBlog,\r\n      addNewBlog,\r\n      save,\r\n      saveComment      \r\n    }} >\r\n      {children}\r\n    </BlogContext.Provider>\r\n  )\r\n};\r\n \r\nexport default BlogContext;","import React, {useState} from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\n\r\nconst style_formats= [\r\n  { title: 'Image Left', selector: 'pre', styles: { 'float': 'left', 'margin': '0 10px 0 10px' } },\r\n]\r\n\r\nconst TextEditor = (props) => {\r\n  const {post} = props;\r\n  const [postContent, setPostContent] = useState(post.content);\r\n\r\n  const handleEditorChange = (content, editor) => {\r\n    setPostContent(content);\r\n    post.newContent = content;\r\n  }\r\n\r\n  return (\r\n    <Editor\r\n      id=\"codeEditor\"\r\n      apiKey=\"wefhnu0ma6zh07117uwxwjj5ila4m1d1y16pp4e59wbc6log\"\r\n      \r\n      initialValue={postContent}\r\n      init={{\r\n        height: 500,\r\n        style_formats,\r\n        menubar: false,\r\n        plugins: [\r\n          'advlist autolink lists link image charmap print preview anchor',\r\n          'searchreplace visualblocks code fullscreen',\r\n          'insertdatetime media table paste code codesample image'\r\n        ],\r\n        toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify |  bullist numlist outdent indent | removeformat | codesample | image | code'\r\n      }}\r\n      onEditorChange={handleEditorChange}\r\n    />\r\n  );\r\n\r\n}\r\n\r\nexport default TextEditor; ","import { makeStyles } from '@material-ui/core/styles'; \r\n\r\nconst blogStyles= makeStyles( (theme)=> ({  \r\n  card: {\r\n    marginRight: 5,\r\n    marginBottom: 5\r\n  },\r\n  post: {\r\n    marginTop: 30\r\n  },\r\n  root: {\r\n    margin: 10,\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignContent: 'center',\r\n    flexWrap: 'wrap',\r\n    listStyle: 'none',\r\n    padding: theme.spacing(0.5)  \r\n  },\r\n\r\n  // Add New Blog Post button styling\r\n  fabAddBlog: {\r\n    marginTop: 10,\r\n    position: 'fixed', \r\n    marginLeft: 'auto',  \r\n    zIndex: 999\r\n  },\r\n\r\n  // Blog post header\r\n  contactHeader: {\r\n    fontSize: 20,\r\n    borderBottom: 2,\r\n    background: '#ffa602'\r\n  }, \r\n\r\n  cardActions: {\r\n    borderTop: 'solid 1px #f9f5ee'\r\n  },\r\n\r\n  // Pencil and Save Icon container\r\n  crudButtons : {\r\n    marginLeft: 'auto'\r\n  },\r\n\r\n  wrapper: {\r\n    margin: theme.spacing(1),\r\n    position: 'relative',\r\n  },\r\n\r\n  commentBox: {\r\n    width: '100%'\r\n  }, \r\n}));   \r\n\r\nexport default blogStyles;","import React, { useState,useContext } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader'; \r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';  \r\nimport Typography from '@material-ui/core/Typography'; \r\nimport TextEditor from '../common/components/editor/TextEditor';\r\nimport { ButtonGroup, IconButton } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport TextField from '@material-ui/core/TextField';  \r\nimport UserContext from '../context/UserContext';\r\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\r\nimport SpinnerButton from '../common/components/controls/SpinnerButton'; \r\nimport { useFormik } from 'formik';  \r\nimport BlogContext from '../context/BlogContext';\r\nimport blogStyles from './useBlogStyles';  \r\n \r\nconst BlogPost = (props) => {   \r\n    const userContextValue = useContext(UserContext);\r\n    const blogContext = useContext(BlogContext); \r\n    const [editClicked, setEditClicked] = useState(false);    \r\n    const [postComment, setPostComment] = useState('');\r\n    const [postCommentLoading, setPostCommentLoading] = useState(false);\r\n    const classes = blogStyles();\r\n\r\n    // Parent events\r\n    const {item } = props; \r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        title: item.title,\r\n        subTitle: item.subTitle,\r\n        content: item.content\r\n      },\r\n      onSubmit: (values) => {\r\n        console.log(values);\r\n      }\r\n    });\r\n \r\n    const getForm = () => {\r\n      return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <Card  > \r\n            <CardHeader\r\n                className={classes.contactHeader}\r\n                title={\r\n                  <React.Fragment>\r\n                    <TextField\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"postTitle\"\r\n                      label=\"title\"\r\n                      name = \"title\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      value={formik.values.title}\r\n                      onChange={formik.handleChange}\r\n                    />   \r\n                    <TextField \r\n                      margin=\"dense\"\r\n                      name= \"subTitle\"\r\n                      id=\"postSubTitle\"\r\n                      label=\"subTitle\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      value={formik.values.subTitle}\r\n                      onChange={formik.handleChange}\r\n                    />                      \r\n                  </React.Fragment>    \r\n                }  \r\n                action={titleCrudButtonMarkup()}\r\n            /> \r\n            <CardContent>  \r\n              <div id=\"container\">\r\n                <TextEditor post={item} /> \r\n              </div> \r\n            </CardContent>\r\n            <CardActions className={classes.cardActions}>\r\n                <InsertCommentIcon />\r\n                <TextField\r\n                  id=\"standard-multiline-flexible\"\r\n                  label=\"add comment\"\r\n                  className={classes.commentBox}\r\n                  multiline\r\n                  rowsMax={4} \r\n                  value={postComment}\r\n                  onChange={handleCommentChange}\r\n                />\r\n                <SpinnerButton buttonProps = {{\r\n                  'text': 'Save',\r\n                  'onClick':  postSaveComment,\r\n                  'loading' : postCommentLoading\r\n                  }}\r\n                />\r\n            </CardActions> \r\n          </Card>  \r\n        </form>\r\n      );  \r\n    }\r\n\r\n    /**\r\n     * Get save and edit button markup for title\r\n     */\r\n    const titleCrudButtonMarkup = () => {  \r\n      if (!userContextValue.isLoggedIn()) {\r\n        return null;\r\n      }\r\n\r\n      // show edit functionality\r\n      return (\r\n        <ButtonGroup \r\n          type=\"submit\"\r\n          color=\"primary\" \r\n          aria-label=\"outlined primary button group\" \r\n          className={classes.crudButtons}>\r\n            {\r\n              !editClicked \r\n              ?  <IconButton aria-label=\"edit\" onClick={()=>setEditClicked(!editClicked)}><EditIcon /></IconButton>       \r\n              :  <IconButton aria-label=\"save\" onClick={()=> postSave()} color=\"primary\"><SaveIcon /></IconButton>      \r\n            } \r\n        </ButtonGroup>\r\n      );\r\n    };\r\n\r\n    const getReadOnlyForm = () => {\r\n      return (\r\n        <Card  > \r\n          <CardHeader\r\n              className={classes.contactHeader}\r\n              title={\r\n                <React.Fragment>\r\n                  <Typography variant=\"h3\">{item.title}</Typography>     \r\n                  <Typography variant=\"h6\">{item.subTitle}</Typography>    \r\n                </React.Fragment> \r\n              }  \r\n              action={titleCrudButtonMarkup()}\r\n          /> \r\n          <CardContent>  \r\n            <div id=\"container\"\r\n              dangerouslySetInnerHTML={{\r\n                __html: props.item.content\r\n              }}>\r\n            </div> \r\n          </CardContent>\r\n          <CardActions className={classes.cardActions}>\r\n              <InsertCommentIcon />\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"add comment\"\r\n                className={classes.commentBox}\r\n                multiline\r\n                rowsMax={4} \r\n                value={postComment}\r\n                onChange={handleCommentChange}\r\n              />\r\n              <SpinnerButton buttonProps = {{\r\n                'text': 'Save',\r\n                'onClick':  postSaveComment,\r\n                'loading' : postCommentLoading\r\n                }}\r\n              />\r\n          </CardActions> \r\n        </Card>  \r\n      );     \r\n    } \r\n\r\n    /**\r\n     * Invoke save method that will call the parent save\r\n     * parent save will invoke the api\r\n     */\r\n    const postSave = () => {    \r\n      // Get post data \r\n      let postData = { \r\n        ...props.item, \r\n        title:formik.values.title,\r\n        subTitle: formik.values.subTitle,\r\n        content: props.item.newContent ? props.item.newContent: props.item.content \r\n      }; \r\n      const isSuccess = blogContext.save(props.item[\"_id\"],postData);\r\n      if (isSuccess) {\r\n        setEditClicked(!editClicked);\r\n      } \r\n    }\r\n\r\n    const postSaveComment = () => {\r\n      setPostCommentLoading(true);\r\n      blogContext.saveComment(props.item[\"_id\"],{ \r\n        _id: props.item[\"_id\"],\r\n        text: postComment\r\n      });\r\n      setPostCommentLoading(false);\r\n    }\r\n\r\n    /**\r\n     * Function to change post comment (controlled)\r\n     * @param {*} e comment event\r\n     */\r\n    const handleCommentChange = (e) => {\r\n      setPostComment(e.target.value);\r\n    }  \r\n \r\n    const getPostCard = () => {  \r\n      return (  \r\n        <div className={classes.wrapper}>\r\n          <div className={classes.card}> \r\n            {\r\n              editClicked\r\n              ? getForm()\r\n              : getReadOnlyForm()\r\n            }            \r\n          </div>   \r\n        </div> \r\n      );\r\n    }  \r\n\r\n    return(  \r\n      <React.Fragment key={props.item.timeStamp}> \r\n        {getPostCard(props.item)} \r\n      </React.Fragment>\r\n    );   \r\n}\r\n\r\nexport default BlogPost;","import Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport Grid from '@material-ui/core/Grid';    \r\nimport { Button, Typography } from '@material-ui/core';\r\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport RefreshIcon from '@material-ui/icons/Refresh'; \r\n\r\nconst useStyles= makeStyles( (theme)=> ({\r\n    post: {\r\n      marginTop: 30\r\n    },\r\n    postBody : {\r\n        height: 118,\r\n        marginTop: -8,\r\n        width: '100%'\r\n    },\r\n    postTitle: {\r\n        height: 50,\r\n        background: '#ffa602'\r\n    },\r\n    retry: {\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontWeight: 'lighter',\r\n        textAlign: 'center'\r\n    },\r\n    sadIcon: {\r\n        fontSize: '40px'\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n  })); \r\n\r\nconst SkeletonBlogPost = (props) =>{\r\n    const { responseData, retry } = props; \r\n    const posts = [1,2,3];\r\n    const classes = useStyles();    \r\n\r\n    const retryBlog = () => retry();\r\n\r\n    const retryElement = (item) => {\r\n        if (item ===1 && responseData && responseData.error) {\r\n            return(\r\n                <div className={classes.retry} onClick={retryBlog}>\r\n                    <Typography variant=\"label\">Something went wrong </Typography>\r\n                    <br/>\r\n                    <SentimentVeryDissatisfiedIcon className={classes.sadIcon}/>\r\n                    <br/>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        endIcon={<RefreshIcon/>}\r\n                    >\r\n                        Retry\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return ( \r\n            <Skeleton variant=\"rect\" className={classes.postBody}/> \r\n        );\r\n    }\r\n\r\n    return(\r\n        <Grid container direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">       \r\n            {posts.map((item) => { \r\n                return(\r\n                <Grid \r\n                    key={item} \r\n                    item xs={12} \r\n                    sm={9} \r\n                    className={classes.post}>   \r\n                        <Skeleton variant=\"text\" className={classes.postTitle}/>\r\n                        {retryElement(item)}\r\n                </Grid> \r\n                );\r\n            })}       \r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SkeletonBlogPost;","import React, { useEffect, useContext } from 'react';\r\nimport Grid from '@material-ui/core/Grid';    \r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';   \r\nimport BlogPost from './BlogPost';\r\nimport SkeletonBlogPost from './skeletons/SkeletonBlogPost'; \r\nimport UserContext from '../context/UserContext';\r\nimport BlogContext from '../context/BlogContext';\r\nimport useBlogStyles from './useBlogStyles'; \r\n \r\nconst BlogPosts = () => { \r\n  const blogContext = useContext(BlogContext); \r\n  const userContextValue = useContext(UserContext);\r\n  const classes = useBlogStyles();   \r\n\r\n  useEffect(() => {\r\n    document.title=\"Blog\";\r\n  },[]);  \r\n\r\n  const retryFetchPosts = () => blogContext.retry();\r\n\r\n  if ( !blogContext || (blogContext && blogContext.error) || (blogContext && !blogContext.posts)){\r\n    // Return a ghost element\r\n    return (\r\n      <SkeletonBlogPost responseData={blogContext} retry={retryFetchPosts}/>\r\n    );\r\n  }  \r\n \r\n  const { posts } = blogContext;  \r\n\r\n  return(  \r\n    <React.Fragment> \r\n      {\r\n        userContextValue.isLoggedIn() \r\n        ? \r\n          <div className={classes.fabAddBlog}> \r\n            <Fab color=\"primary\" aria-label=\"add\" onClick={blogContext.addNewBlog} >\r\n              <AddIcon />\r\n            </Fab>    \r\n          </div>        \r\n        : ''\r\n      } \r\n\r\n      <Grid container direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"center\">   \r\n        {posts.map((item) => { \r\n          return(\r\n            <Grid key={item._id} item xs={12} sm={9} className={classes.post}>   \r\n              <BlogPost \r\n                item={item}  \r\n                key={item._id}\r\n              />\r\n            </Grid> \r\n          );\r\n        })}       \r\n      </Grid>  \r\n    </React.Fragment>\r\n  );  \r\n}\r\n\r\nexport default BlogPosts;","/**\r\n * Blog articles page\r\n */ \r\nimport {useContext} from 'react';  \r\nimport BlogContext, { BlogProvider } from '../context/BlogContext';\r\nimport BlogPosts from './BlogPosts';\r\n\r\nconst Blog = () => {   \r\n  const data = useContext(BlogContext); \r\n  if (!data){\r\n    return <div>Loading...</div>\r\n  }  \r\n \r\n  return (\r\n    <BlogProvider>\r\n      <BlogPosts/> \r\n    </BlogProvider>\r\n  );\r\n}\r\n\r\nexport default Blog;"],"sourceRoot":""}