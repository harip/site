{"version":3,"sources":["context/BlogContext.js","common/components/editor/TextEditor.js","blog/useBlogStyles.js","blog/BlogPost.js","blog/skeletons/SkeletonBlogPost.js","blog/BlogPosts.js","blog/Blog.js"],"names":["initialState","posts","error","retry","save","addNewBlog","saveComment","BlogContext","React","createContext","BlogProvider","children","userContextValue","useContext","UserContext","useState","blogs","setBlogs","fetchBlogData","a","axiosConfig","get","response","data","useEffect","id","blogData","put","token","currentPostIndex","findIndex","f","_id","splice","console","comment","newItem","title","subTitle","content","unshift","patch","Provider","value","style_formats","selector","styles","TextEditor","props","post","postContent","setPostContent","apiKey","initialValue","init","height","menubar","plugins","toolbar","onEditorChange","editor","newContent","blogStyles","makeStyles","theme","card","marginRight","marginBottom","marginTop","root","margin","display","justifyContent","alignContent","flexWrap","listStyle","padding","spacing","fabAddBlog","position","marginLeft","zIndex","contactHeader","fontSize","borderBottom","background","cardActions","borderTop","crudButtons","wrapper","commentBox","width","BlogPost","blogContext","editClicked","setEditClicked","postComment","setPostComment","postCommentLoading","setPostCommentLoading","classes","item","formik","useFormik","initialValues","onSubmit","values","log","titleCrudButtonMarkup","isLoggedIn","ButtonGroup","type","color","aria-label","className","IconButton","onClick","postSave","postData","postSaveComment","text","handleCommentChange","e","target","Fragment","handleSubmit","Card","CardHeader","TextField","autoFocus","label","name","fullWidth","onChange","handleChange","action","CardContent","CardActions","multiline","rowsMax","SpinnerButton","buttonProps","Typography","variant","dangerouslySetInnerHTML","__html","timeStamp","useStyles","postBody","postTitle","fontFamily","fontWeight","textAlign","sadIcon","button","SkeletonBlogPost","responseData","retryBlog","retryElement","Button","endIcon","Skeleton","Grid","container","direction","justify","alignItems","map","xs","sm","BlogPosts","useBlogStyles","document","Fab","Blog"],"mappings":"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","file":"static/js/4.a7e4669d.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react'; \nimport axiosConfig from '../apis/axiosConfig';\nimport UserContext from './UserContext';\n\nconst initialState = {\n  // Default empty function\n  posts: null,\n  error: false, \n  retry: ()=>{},\n  save: ()=>{},\n  addNewBlog: ()=>{},\n  saveComment: ()=>{} \n};\n\nconst BlogContext = React.createContext(initialState);\n\nexport const BlogProvider = ({children}) => {\n  const userContextValue = useContext(UserContext);\n  const [blogs, setBlogs] = useState(null);\n\n  useEffect(() => { \n    fetchBlogData(); \n  }, [])\n\n  async function fetchBlogData() { \n    let posts = null;\n    let error = false; \n    try {\n      let response = await axiosConfig.get('/post'); \n      posts=response.data; \n    } catch(err) {\n      error = true;\n    } \n\n    setBlogs({\n      posts,\n      error\n    });\n  }  \n\n  const save = async (id,blogData) => { \n    if (id){\n      blogData[\"_id\"] = id;\n    } \n\n    try {\n      await axiosConfig.put('/post',{\n        ...blogData,\n        token: userContextValue.token\n      });\n      \n      // Reset state\n      let { posts } = { ...blogs };  \n      let currentPostIndex = posts.findIndex(f=>f._id === `${id}`);\n      if (currentPostIndex>=0) {   \n        // Set content and titles\n        posts.splice(currentPostIndex,1,blogData);\n        setBlogs({\n          posts,\n          error: false\n        });\n      } \n\n      // Reset value \n      return true;\n    } catch (err) {\n      // Don't do anything\n      console.error(err);\n      return false;\n    }\n  }\n\n  const addNewBlog = async (id,comment) => { \n    try {\n      // Create a empty item\n      const newItem = {  \n        title:'',\n        subTitle: '',\n        content: 'Enter text' \n      }; \n      let { posts } = { ...blogs };   \n      posts.unshift(newItem);\n      setBlogs({\n        posts,\n        error: false\n      });\n      return true;\n    } catch (err) {\n      // Don't do anything\n      console.error(err);\n      return false;\n    } \n  }\n\n  const saveComment = async (id,comment) => {\n    try {\n      const response = await axiosConfig.patch('/post',  comment );\n      return true;\n    } catch (err) {\n      // Don't do anything\n      console.error(err);\n      return false;\n    } \n  }\n\n  const retryFetchBlog = () =>  fetchBlogData(); \n\n  return (\n    <BlogContext.Provider value={{\n      ...blogs,\n      retry: retryFetchBlog,\n      addNewBlog,\n      save,\n      saveComment      \n    }} >\n      {children}\n    </BlogContext.Provider>\n  )\n};\n \nexport default BlogContext;","import React, {useState} from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst style_formats= [\n  { title: 'Image Left', selector: 'pre', styles: { 'float': 'left', 'margin': '0 10px 0 10px' } },\n]\n\nconst TextEditor = (props) => {\n  const {post} = props;\n  const [postContent, setPostContent] = useState(post.content);\n\n  const handleEditorChange = (content, editor) => {\n    setPostContent(content);\n    post.newContent = content;\n  }\n\n  return (\n    <Editor\n      id=\"codeEditor\"\n      apiKey=\"wefhnu0ma6zh07117uwxwjj5ila4m1d1y16pp4e59wbc6log\"\n      \n      initialValue={postContent}\n      init={{\n        height: 500,\n        style_formats,\n        menubar: false,\n        plugins: [\n          'advlist autolink lists link image charmap print preview anchor',\n          'searchreplace visualblocks code fullscreen',\n          'insertdatetime media table paste code codesample image'\n        ],\n        toolbar: 'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify |  bullist numlist outdent indent | removeformat | codesample | image | code'\n      }}\n      onEditorChange={handleEditorChange}\n    />\n  );\n\n}\n\nexport default TextEditor; ","import { makeStyles } from '@material-ui/core/styles'; \n\nconst blogStyles= makeStyles( (theme)=> ({  \n  card: {\n    marginRight: 5,\n    marginBottom: 5\n  },\n  post: {\n    marginTop: 30\n  },\n  root: {\n    margin: 10,\n    display: 'flex',\n    justifyContent: 'center',\n    alignContent: 'center',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    padding: theme.spacing(0.5)  \n  },\n\n  // Add New Blog Post button styling\n  fabAddBlog: {\n    marginTop: 10,\n    position: 'fixed', \n    marginLeft: 'auto',  \n    zIndex: 999\n  },\n\n  // Blog post header\n  contactHeader: {\n    fontSize: 20,\n    borderBottom: 2,\n    background: '#ffa602'\n  }, \n\n  cardActions: {\n    borderTop: 'solid 1px #f9f5ee'\n  },\n\n  // Pencil and Save Icon container\n  crudButtons : {\n    marginLeft: 'auto'\n  },\n\n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative',\n  },\n\n  commentBox: {\n    width: '100%'\n  }, \n}));   \n\nexport default blogStyles;","import React, { useState,useContext } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader'; \nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';  \nimport Typography from '@material-ui/core/Typography'; \nimport TextEditor from '../common/components/editor/TextEditor';\nimport { ButtonGroup, IconButton } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TextField from '@material-ui/core/TextField';  \nimport UserContext from '../context/UserContext';\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\nimport SpinnerButton from '../common/components/controls/SpinnerButton'; \nimport { useFormik } from 'formik';  \nimport BlogContext from '../context/BlogContext';\nimport blogStyles from './useBlogStyles';  \n \nconst BlogPost = (props) => {   \n    const userContextValue = useContext(UserContext);\n    const blogContext = useContext(BlogContext); \n    const [editClicked, setEditClicked] = useState(false);    \n    const [postComment, setPostComment] = useState('');\n    const [postCommentLoading, setPostCommentLoading] = useState(false);\n    const classes = blogStyles();\n\n    // Parent events\n    const {item } = props; \n\n    const formik = useFormik({\n      initialValues: {\n        title: item.title,\n        subTitle: item.subTitle,\n        content: item.content\n      },\n      onSubmit: (values) => {\n        console.log(values);\n      }\n    });\n \n    const getForm = () => {\n      return (\n        <form onSubmit={formik.handleSubmit}>\n          <Card  > \n            <CardHeader\n                className={classes.contactHeader}\n                title={\n                  <React.Fragment>\n                    <TextField\n                      autoFocus\n                      margin=\"dense\"\n                      id=\"postTitle\"\n                      label=\"title\"\n                      name = \"title\"\n                      type=\"text\"\n                      fullWidth\n                      value={formik.values.title}\n                      onChange={formik.handleChange}\n                    />   \n                    <TextField \n                      margin=\"dense\"\n                      name= \"subTitle\"\n                      id=\"postSubTitle\"\n                      label=\"subTitle\"\n                      type=\"text\"\n                      fullWidth\n                      value={formik.values.subTitle}\n                      onChange={formik.handleChange}\n                    />                      \n                  </React.Fragment>    \n                }  \n                action={titleCrudButtonMarkup()}\n            /> \n            <CardContent>  \n              <div id=\"container\">\n                <TextEditor post={item} /> \n              </div> \n            </CardContent>\n            <CardActions className={classes.cardActions}>\n                <InsertCommentIcon />\n                <TextField\n                  id=\"standard-multiline-flexible\"\n                  label=\"add comment\"\n                  className={classes.commentBox}\n                  multiline\n                  rowsMax={4} \n                  value={postComment}\n                  onChange={handleCommentChange}\n                />\n                <SpinnerButton buttonProps = {{\n                  'text': 'Save',\n                  'onClick':  postSaveComment,\n                  'loading' : postCommentLoading\n                  }}\n                />\n            </CardActions> \n          </Card>  \n        </form>\n      );  \n    }\n\n    /**\n     * Get save and edit button markup for title\n     */\n    const titleCrudButtonMarkup = () => {  \n      if (!userContextValue.isLoggedIn()) {\n        return null;\n      }\n\n      // show edit functionality\n      return (\n        <ButtonGroup \n          type=\"submit\"\n          color=\"primary\" \n          aria-label=\"outlined primary button group\" \n          className={classes.crudButtons}>\n            {\n              !editClicked \n              ?  <IconButton aria-label=\"edit\" onClick={()=>setEditClicked(!editClicked)}><EditIcon /></IconButton>       \n              :  <IconButton aria-label=\"save\" onClick={()=> postSave()} color=\"primary\"><SaveIcon /></IconButton>      \n            } \n        </ButtonGroup>\n      );\n    };\n\n    const getReadOnlyForm = () => {\n      return (\n        <Card  > \n          <CardHeader\n              className={classes.contactHeader}\n              title={\n                <React.Fragment>\n                  <Typography variant=\"h3\">{item.title}</Typography>     \n                  <Typography variant=\"h6\">{item.subTitle}</Typography>    \n                </React.Fragment> \n              }  \n              action={titleCrudButtonMarkup()}\n          /> \n          <CardContent>  \n            <div id=\"container\"\n              dangerouslySetInnerHTML={{\n                __html: props.item.content\n              }}>\n            </div> \n          </CardContent>\n          <CardActions className={classes.cardActions}>\n              <InsertCommentIcon />\n              <TextField\n                id=\"standard-multiline-flexible\"\n                label=\"add comment\"\n                className={classes.commentBox}\n                multiline\n                rowsMax={4} \n                value={postComment}\n                onChange={handleCommentChange}\n              />\n              <SpinnerButton buttonProps = {{\n                'text': 'Save',\n                'onClick':  postSaveComment,\n                'loading' : postCommentLoading\n                }}\n              />\n          </CardActions> \n        </Card>  \n      );     \n    } \n\n    /**\n     * Invoke save method that will call the parent save\n     * parent save will invoke the api\n     */\n    const postSave = () => {    \n      // Get post data \n      let postData = { \n        ...props.item, \n        title:formik.values.title,\n        subTitle: formik.values.subTitle,\n        content: props.item.newContent ? props.item.newContent: props.item.content \n      }; \n      const isSuccess = blogContext.save(props.item[\"_id\"],postData);\n      if (isSuccess) {\n        setEditClicked(!editClicked);\n      } \n    }\n\n    const postSaveComment = () => {\n      setPostCommentLoading(true);\n      blogContext.saveComment(props.item[\"_id\"],{ \n        _id: props.item[\"_id\"],\n        text: postComment\n      });\n      setPostCommentLoading(false);\n    }\n\n    /**\n     * Function to change post comment (controlled)\n     * @param {*} e comment event\n     */\n    const handleCommentChange = (e) => {\n      setPostComment(e.target.value);\n    }  \n \n    const getPostCard = () => {  \n      return (  \n        <div className={classes.wrapper}>\n          <div className={classes.card}> \n            {\n              editClicked\n              ? getForm()\n              : getReadOnlyForm()\n            }            \n          </div>   \n        </div> \n      );\n    }  \n\n    return(  \n      <React.Fragment key={props.item.timeStamp}> \n        {getPostCard(props.item)} \n      </React.Fragment>\n    );   \n}\n\nexport default BlogPost;","import Skeleton from '@material-ui/lab/Skeleton';\nimport { makeStyles } from '@material-ui/core/styles'; \nimport Grid from '@material-ui/core/Grid';    \nimport { Button, Typography } from '@material-ui/core';\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\nimport RefreshIcon from '@material-ui/icons/Refresh'; \n\nconst useStyles= makeStyles( (theme)=> ({\n    post: {\n      marginTop: 30\n    },\n    postBody : {\n        height: 118,\n        marginTop: -8,\n        width: '100%'\n    },\n    postTitle: {\n        height: 50,\n        background: '#ffa602'\n    },\n    retry: {\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontWeight: 'lighter',\n        textAlign: 'center'\n    },\n    sadIcon: {\n        fontSize: '40px'\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n  })); \n\nconst SkeletonBlogPost = (props) =>{\n    const { responseData, retry } = props; \n    const posts = [1,2,3];\n    const classes = useStyles();    \n\n    const retryBlog = () => retry();\n\n    const retryElement = (item) => {\n        if (item ===1 && responseData && responseData.error) {\n            return(\n                <div className={classes.retry} onClick={retryBlog}>\n                    <Typography variant=\"label\">Something went wrong </Typography>\n                    <br/>\n                    <SentimentVeryDissatisfiedIcon className={classes.sadIcon}/>\n                    <br/>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<RefreshIcon/>}\n                    >\n                        Retry\n                    </Button>\n                </div>\n            );\n        }\n\n        return ( \n            <Skeleton variant=\"rect\" className={classes.postBody}/> \n        );\n    }\n\n    return(\n        <Grid container direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\">       \n            {posts.map((item) => { \n                return(\n                <Grid \n                    key={item} \n                    item xs={12} \n                    sm={9} \n                    className={classes.post}>   \n                        <Skeleton variant=\"text\" className={classes.postTitle}/>\n                        {retryElement(item)}\n                </Grid> \n                );\n            })}       \n        </Grid>\n    );\n};\n\nexport default SkeletonBlogPost;","import React, { useEffect, useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';    \nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';   \nimport BlogPost from './BlogPost';\nimport SkeletonBlogPost from './skeletons/SkeletonBlogPost'; \nimport UserContext from '../context/UserContext';\nimport BlogContext from '../context/BlogContext';\nimport useBlogStyles from './useBlogStyles'; \n \nconst BlogPosts = () => { \n  const blogContext = useContext(BlogContext); \n  const userContextValue = useContext(UserContext);\n  const classes = useBlogStyles();   \n\n  useEffect(() => {\n    document.title=\"Blog\";\n  },[]);  \n\n  const retryFetchPosts = () => blogContext.retry();\n\n  if ( !blogContext || (blogContext && blogContext.error) || (blogContext && !blogContext.posts)){\n    // Return a ghost element\n    return (\n      <SkeletonBlogPost responseData={blogContext} retry={retryFetchPosts}/>\n    );\n  }  \n \n  const { posts } = blogContext;  \n\n  return(  \n    <React.Fragment> \n      {\n        userContextValue.isLoggedIn() \n        ? \n          <div className={classes.fabAddBlog}> \n            <Fab color=\"primary\" aria-label=\"add\" onClick={blogContext.addNewBlog} >\n              <AddIcon />\n            </Fab>    \n          </div>        \n        : ''\n      } \n\n      <Grid container direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\">   \n        {posts.map((item) => { \n          return(\n            <Grid key={item._id} item xs={12} sm={9} className={classes.post}>   \n              <BlogPost \n                item={item}  \n                key={item._id}\n              />\n            </Grid> \n          );\n        })}       \n      </Grid>  \n    </React.Fragment>\n  );  \n}\n\nexport default BlogPosts;","/**\n * Blog articles page\n */ \nimport {useContext} from 'react';  \nimport BlogContext, { BlogProvider } from '../context/BlogContext';\nimport BlogPosts from './BlogPosts';\n\nconst Blog = () => {   \n  const data = useContext(BlogContext); \n  if (!data){\n    return <div>Loading...</div>\n  }  \n \n  return (\n    <BlogProvider>\n      <BlogPosts/> \n    </BlogProvider>\n  );\n}\n\nexport default Blog;"],"sourceRoot":""}